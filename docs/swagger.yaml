basePath: /api/v1
definitions:
  dto.ForgotPasswordRequest:
    properties:
      email:
        example: john@example.com
        type: string
      otp:
        type: string
      password:
        example: <PASSWORD>!@#
        minLength: 8
        type: string
    required:
    - email
    - otp
    - password
    type: object
  dto.LoginRequest:
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: Pass123!@#
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    required:
    - access_token
    - refresh_token
    type: object
  dto.LogoutRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.RefreshTokenResponse:
    properties:
      access_token:
        type: string
    required:
    - access_token
    type: object
  dto.RegisterRequest:
    properties:
      confirm:
        example: Pass123!@#
        minLength: 8
        type: string
      email:
        example: john@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: Pass123!@#
        minLength: 8
        type: string
    required:
    - confirm
    - email
    - name
    - password
    type: object
  dto.SendOtpRequest:
    properties:
      email:
        example: john@example.com
        type: string
    required:
    - email
    type: object
  dto.VerifyEmailRequest:
    properties:
      email:
        example: john@example.com
        type: string
      otp:
        type: string
    required:
    - email
    - otp
    type: object
  entity.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      email_verified:
        type: string
      name:
        type: string
      password:
        type: string
      profile_picture:
        type: string
      updated_at:
        type: string
      uuid:
        type: string
    type: object
  response.ErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
      status:
        type: integer
    type: object
  response.Response:
    properties:
      data: {}
      error:
        type: string
      message:
        type: string
      status:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server for Doc Management API.
  title: Doc Management API
  version: "1.0"
paths:
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Reset password using OTP
      parameters:
      - description: Forgot Password Request
        in: body
        name: forgotPassword
        required: true
        schema:
          $ref: '#/definitions/dto.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Forgot password
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login user with email and password
      parameters:
      - description: Login Request
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "201":
          description: user logged in successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.LoginResponse'
              type: object
        "400":
          description: invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Login user
      tags:
      - Auth
  /auth/logout:
    delete:
      consumes:
      - application/json
      description: Logout user and invalidate the refresh token
      parameters:
      - description: Logout Request
        in: body
        name: logout
        required: true
        schema:
          $ref: '#/definitions/dto.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: user logged out successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh access token using refresh token
      parameters:
      - description: Refresh Token Request
        in: body
        name: refresh
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: access token refreshed successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.RefreshTokenResponse'
              type: object
        "400":
          description: invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Refresh access token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with name, email, and password
      parameters:
      - description: Register Request
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: user registered successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.User'
              type: object
        "400":
          description: invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Register a new user
      tags:
      - Auth
  /auth/send-otp:
    post:
      consumes:
      - application/json
      description: Send OTP to user's email
      parameters:
      - description: Send OTP Request
        in: body
        name: sendOtp
        required: true
        schema:
          $ref: '#/definitions/dto.SendOtpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Send OTP
      tags:
      - Auth
  /auth/verify-email:
    post:
      consumes:
      - application/json
      description: Verify email using OTP
      parameters:
      - description: Verify Email Request
        in: body
        name: verifyEmail
        required: true
        schema:
          $ref: '#/definitions/dto.VerifyEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Email verified successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Verify email
      tags:
      - Auth
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
